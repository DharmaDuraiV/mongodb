

  ðŸ”§ 1. `$currentDate`

   âœ… Definition:

Sets the value of a field to the current date or timestamp.

   ðŸ“˜ Collection: `logs`

 Before: 

 json
{ "_id": 1, "event": "login" }
 

 Update: 

 js
db.logs.updateOne(
  { _id: 1 },
  { $currentDate: { lastModified: true } }
)
 

 After: 

 json
{ "_id": 1, "event": "login", "lastModified": ISODate("2025-05-22T12:00:00Z") }
 

 

  ðŸ”§ 2. `$inc`

   âœ… Definition:

Increments the numeric value of a field by a specified amount.

   ðŸ“˜ Collection: `accounts`

 Before: 

 json
{ "_id": 1, "username": "john", "balance": 100 }
 

 Update: 

 js
db.accounts.updateOne(
  { _id: 1 },
  { $inc: { balance: 50 } }
)
 

 After: 

 json
{ "_id": 1, "username": "john", "balance": 150 }
 

 

  ðŸ”§ 3. `$min`

   âœ… Definition:

Updates the field  only if  the specified value is  less  than the existing field value.

   ðŸ“˜ Collection: `scores`

 Before: 

 json
{ "_id": 1, "student": "Alice", "highScore": 95 }
 

 Update: 

 js
db.scores.updateOne(
  { _id: 1 },
  { $min: { highScore: 90 } }
)
 

 After: 

 json
{ "_id": 1, "student": "Alice", "highScore": 90 }
 

 

  ðŸ”§ 4. `$max`

   âœ… Definition:

Updates the field  only if  the specified value is  greater  than the existing field value.

   ðŸ“˜ Collection: `scores`

 Before: 

 json
{ "_id": 2, "student": "Bob", "highScore": 85 }
 

 Update: 

 js
db.scores.updateOne(
  { _id": 2 },
  { $max: { highScore: 98 } }
)
 

 After: 

 json
{ "_id": 2, "student": "Bob", "highScore": 98 }
 

 

  ðŸ”§ 5. `$mul`

   âœ… Definition:

Multiplies the value of the field by a given number.

   ðŸ“˜ Collection: `products`

 Before: 

 json
{ "_id": 1, "name": "Shoes", "price": 100 }
 

 Update: 

 js
db.products.updateOne(
  { _id: 1 },
  { $mul: { price: 1.2 } }
)
 

 After: 

 json
{ "_id": 1, "name": "Shoes", "price": 120 }
 

 

  ðŸ”§ 6. `$rename`

   âœ… Definition:

Renames a field.

   ðŸ“˜ Collection: `users`

 Before: 

 json
{ "_id": 1, "fname": "John", "lname": "Smith" }
 

 Update: 

 js
db.users.updateOne(
  { _id: 1 },
  { $rename: { "fname": "firstName", "lname": "lastName" } }
)
 

 After: 

 json
{ "_id": 1, "firstName": "John", "lastName": "Smith" }
 

 

  ðŸ”§ 7. `$set`

   âœ… Definition:

Sets a field to a specified value. Creates the field if it doesn't exist.

   ðŸ“˜ Collection: `profiles`

 Before: 

 json
{ "_id": 1, "username": "alice" }
 

 Update: 

 js
db.profiles.updateOne(
  { _id: 1 },
  { $set: { role: "admin", status: "active" } }
)
 

 After: 

 json
{ "_id": 1, "username": "alice", "role": "admin", "status": "active" }
 

 

  ðŸ”§ 8. `$setOnInsert`

   âœ… Definition:

Sets a field  only if the document is inserted  (via `upsert`).

   ðŸ“˜ Collection: `settings`

 Upsert Operation: 

 js
db.settings.updateOne(
  { _id: 2 },
  {
    $set: { theme: "dark" },
    $setOnInsert: { createdAt: new Date() }
  },
  { upsert: true }
)
 

 If inserted: 

 json
{
  "_id": 2,
  "theme": "dark",
  "createdAt": ISODate("2025-05-22T12:00:00Z")
}
 

 If updated:  `createdAt` is  not added or changed .

 

  ðŸ”§ 9. `$unset`

   âœ… Definition:

Removes a field from the document.

   ðŸ“˜ Collection: `users`

 Before: 

 json
{ "_id": 1, "username": "alice", "tempCode": "ABC123" }
 

 Update: 

 js
db.users.updateOne(
  { _id: 1 },
  { $unset: { tempCode: "" } }
)
 

 After: 

 json
{ "_id": 1, "username": "alice" }
 

 
